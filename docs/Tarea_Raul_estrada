
 # -*- coding: utf-8 -*-
 """Tarea de SQL Raul Estrada.ipynb

 Automatically generated by Colaboratory.

 Original file is located at
     https://colab.research.google.com/drive/1q5mBoyiKd6t8T7ZCrG49xbEa6bStnQ20

 ***What is SQL***
 ===========

 **_By Raúl Estrada_.**

 [Back to home](./index.md)

 **Introduction**
 ------------
 SQL stands for Structured Query Language. It is a programming language for managing and manipulating relational databases. SQL is used to create, modify, and query databases. Provides a set of commands and syntax for performing operations on data stored in relational databases. With SQL, you can create tables to store data, insert data into tables, retrieve data from tables based on specific criteria, update existing data in tables, and delete data from tables.
 SQL is used by database administrators, developers, data analysts, and other professionals who work with data. It is an important tool for processing large and complex data sets and is widely used in industries such as finance, healthcare, and e-commerce.
 check plagiarism




 *Sql vs. Storage solution*
 -------------------------------
 Here are some key differences between SQL and other storage solutions.
Data model: SQL uses a relational data model that organizes data in tables with columns and rows. NoSQL databases use different data models to store and manage data, such as document-oriented, key-value, or graph-based data models. Query Language: SQL uses a standard language called Structured Query Language to query and manipulate data. Other storage solutions may use different query languages ​​or APIs to access and query data. Scalability – NoSQL databases are designed for horizontal scalability, which means they can scale to multiple nodes and handle large amounts of data and traffic. SQL databases can also be scaled, but are generally limited by the capabilities of the underlying hardware. Data Consistency: SQL databases use ACID (Atomicity, Consistency, Isolation, and Durability) transactions to ensure data consistency and integrity. NoSQL databases can sacrifice consistency in favor of other factors such as scalability or availability. Use case: SQL databases are suitable for applications that require complex queries, transactions, and relational data structures. NoSQL databases are typically used for applications that require high performance, scalability, and data model flexibility. Ultimately, the choice between SQL and other storage solutions depends on the specific needs of your application, including performance, scalability, data complexity, and query requirements.

*Commands SQL*
 ------------

 ### The SELECT statement

 The SELECT statement is used in SQL to retrieve data from one or more database tables. The SELECT statement is the most commonly used statement in SQL and is used to retrieve data based on certain conditions. The SELECT statement contains the following components:

 SELECT – This is the first keyword in the SELECT statement that specifies the columns to retrieve. FROM – This keyword specifies one or more tables from which data will be retrieved. WHERE – This optional keyword specifies the conditions that must be met to include the row in the result set. GROUP BY – This keyword is used to group rows based on a specific column or set of columns. HAVING – This optional keyword is used to filter groups based on certain criteria. ORDER BY – This keyword is used to order the result set by the specified column. For example, the following SELECT statement retrieves all rows from the "customers" table where the "city" column equals "New York".

 example:
 ```
 SELECT * FROM clientes WHERE ciudad = \'Nueva York\'`

 ```

 The result set of this query will include all columns in all rows of the "customers" table where the column "city" equals "New York".

 ### The INSERT statement
 `
 The INSERT statement is used in SQL to insert data into a database table. The INSERT statement is used to add new rows of data to an existing table or to create a new table containing data. An INSERT statement has the following components:

 INSERT INTO – This is the first keyword in an INSERT statement that specifies the name of the table into which the data will be inserted. VALUES: This keyword specifies the values ​​to insert into the table. The values ​​must be entered in the same order as the table columns. For example, the following INSERT statement inserts a new row of data into the "customers" table:
 ```
 INSERT INTO (nombre, apellido, correo electrónico, teléfono)
 SELECT Nombre, Apellido, Email, Teléfono
 FROM nuevos clientes; 

 ```

 
This statement inserts data from the "new_customers" table into the "customers" table for the columns specified in the SELECT statement.


 ### The UPDATE statement

 The UPDATE statement is used in SQL to modify existing data in a database table. The UPDATE statement is used to change the value of one or more columns in one or more rows of a table. An UPDATE statement has the following components

 UPDATE – This is the first keyword in the UPDATE statement that specifies the name of the table to update. SET – This keyword specifies the new value of the column to update. WHERE – This keyword specifies the conditions that must be met for the row to be updated. If the WHERE clause is omitted, all rows in the table will be updated. For example, this UPDATE statement updates the phone number of a customer whose customer_id in the customer table is 1:
 ```

 UPDATE el cliente
 SET TELÉFONO=\'555-5678\'
 WHERE id_cliente = 1;

 ```

 ### The DELETE statement

 The DELETE statement is used in SQL to delete one or more rows from a table in a database. The DELETE statement is used to permanently delete data from a table. The DELETE statement has the following components:

 DELETE FROM – This is the first keyword in the DELETE statement and specifies the name of the table from which the data will be removed. WHERE – This keyword specifies the conditions that must be met to delete a row. If the WHERE clause is omitted, all rows in the table will be deleted. For example, the following DELETE statement deletes a row from the "customers" table where "customer_id" is 1:
 ```
 DELETE FROM cliente
 WHERE id_cliente = 1;

 ```


 This statement removes the row where "customer_id" is 1 from the "customers" table. If you want to remove all rows from the table, you can omit the WHERE clause:

 ```
 DELETE FROM cliente;
 ```


 *SQL clauses*
 -----------

 ### The WHERE clause

 The WHERE clause is used in SQL to specify conditions that must be met to return rows in a SELECT statement or to update or delete rows in an UPDATE or DELETE statement.
 The WHERE clause is used to filter data based on a specific condition or set of conditions. It can be used to filter data based on one or more columns in the table and can include operators such as equal to (=), greater than (>), less than (<), and not equal to (<>), between. others.
 For example, the following SELECT statement retrieves all rows from the "customers" table where "city" is \'New York\':
 ```
 SELECT *
 FROM cliente
 WHERE ciudad = \'Nueva York\';
 ```


 ### The clause  ORDER BY 

 The ORDER BY clause is used in SQL to sort the result set of a SELECT statement in ascending or descending order by one or more columns.
 The ORDER BY clause is used to order the rows returned by a SELECT statement in a specific order based on the values ​​in one or more columns. It can be used to sort data in ascending (default) or descending order, or it can be used to sort data by multiple columns.
 For example, the following SELECT statement retrieves all rows from the "customers" table and sorts them in ascending order by the "lastname" column:
 ````
 SELECT *
 FROM cliente
 ORDER BY apellido;
 ````

 ### The clause GROUP BY 

 The GROUP BY clause is used in SQL to group the result set of a SELECT statement by one or more columns and apply aggregate functions such as SUM, COUNT, AVG, MIN, and MAX to each group.
 The GROUP BY clause is used to group the rows returned by the SELECT statement into sets of rows based on the values ​​in one or more columns. It is often used in conjunction with aggregate functions to calculate summary statistics for each set of rows.
 For example, the following SELECT statement retrieves the total sales for each salesperson in the Orders table:
 ```
 SELECT vendedor, SUM(order_total) como total_sales
 FROM orden
 GROUP por proveedor;
 ```

 ### The clause LIMIT

 The LIMIT expression is used in SQL to limit the number of rows returned by a SELECT statement to a specific number.
 The LIMIT statement is used to limit the number of rows returned by the SELECT statement to a specific number. It is often used in conjunction with the ORDER BY clause to retrieve a specific subset of rows from the result set.
 For example, the following SELECT statement retrieves the first 10 rows of the "customers" table in alphabetical order by the "lastname" column:
 
 ````
 SELECT *
 FROM cliente
 ORDER BY apellido
 LIMIT 10;
 `````

 This statement returns the first 10 rows of the "customers" table in alphabetical order after the "lastname" column.

 *other commands SQL*
 ------------------

 ### The command CREATE TABLE

 The SQL CREATE TABLE command is used to create a new table in the database.
 The syntax of the CREATE TABLE command is as follows:

 ````
 CREATE TABLE table_name (
     column1 datatype,
     column2 datatype,
     column3 datatype,
     ...
 );
 ````

 In this syntax, tablename is the name of the table to create, but column1, column2, column3, etc. are the names of the columns of the table. The data type specifies the type of data that can be stored in each column. After running the CREATE TABLE command, a new table with the specified columns and data types is created in the database. You can then use other SQL commands, such as INSERT, SELECT, UPDATE, and DELETE, to manipulate the data in the table.

 ### The command ALTER TABLE

 The ALTER TABLE SQL command is used to change the structure of an existing table in a database. It allows you to add, modify, or remove table columns, change a column's data type, add or remove constraints, and more. The syntax of the ALTER TABLE command varies depending on the specific modification you want to make. Here are some examples:
 
 To add a new column to an existing table:

 ````
 ALTER TABLE nombre de la tabla
 ADD COLUMN  nombre_columna tipo de datos;
 ````


 ### The command DROP TABLE
 The DROP TABLE command in SQL is used to drop a table and all its data from the database. When you run the DROP TABLE command, you permanently drop the entire table, including all its rows, columns, constraints, and indexes. The syntax of the DROP TABLE command is as follows:
 delete table name;

 In this syntax, table_name is the name of the table to drop. After executing the DROP TABL commandE, la tabla se elimina permanentemente de la base de datos. Tenga cuidado al usar el comando DROP TABLE, ya que dejar caer accidentalmente una tabla que aún se necesita puede tener consecuencias no deseadas. Siempre verifique dos veces el nombre de la tabla y haga una copia de seguridad de los datos de la tabla antes de usar el comando DROP TABLE.
 """
